{
  "uid" : "d14c3705010cb957",
  "name" : "testcase.test_aqi#test_main",
  "fullName" : "testcase.test_aqi#test_main",
  "historyId" : "1ba2dbb23be84850a60baffe8c3998e2",
  "time" : {
    "start" : 1625214589189,
    "stop" : 1625214589211,
    "duration" : 22
  },
  "status" : "broken",
  "statusMessage" : "ValueError: 可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data",
  "statusTrace" : "cases = ['', '', '', '', '', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n>       response, expect, sql = BaseRequest.send_request(cases)\n\ntestcase\\test_aqi.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_requests.py:57: in send_request\n    res = cls.send_api(url, method, parametric_key, header, data, file)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'base.base_requests.BaseRequest'>\nrequest_url = 'http://10.206.83.102:8888', request_method = ''\nparametric_key = ''\nheader = {'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'}\ndata = None, file = None\n\n    @classmethod\n    def send_api(cls, request_url, request_method, parametric_key, header=None, data=None, file=None) -> object:\n        \"\"\"\n        :param method: 请求方法\n        :param url: 请求url\n        :param parametric_key: 入参关键字， get/delete/head/options/请求使用params,\n         post/put/patch请求可使用json（application/json）/data\n        :param data: 参数数据，默认等于None\n        :param file: 文件对象\n        :param header: 请求头\n        :return: 返回res对象\n        \"\"\"\n        session = cls.get_session()\n    \n        if parametric_key == 'params':\n            res = session.request(method=request_method, url=request_url, params=data, headers=header)\n        elif parametric_key == 'data':\n            res = session.request(method=request_method, url=request_url, data=data, files=file, headers=header)\n        elif parametric_key == 'json':\n            res = session.request(method=request_method, url=request_url, json=data, files=file, headers=header)\n        else:\n>           raise ValueError(\n                '可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data')\nE           ValueError: 可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data\n\nbase\\base_requests.py:95: ValueError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "cases",
    "time" : {
      "start" : 1625214589188,
      "stop" : 1625214589188,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : false
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "ValueError: 可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data",
    "statusTrace" : "cases = ['', '', '', '', '', '', ...]\n\n    @pytest.mark.flaky(reruns=0, reruns_delay=1)\n    def test_main(cases):#cases, get_db\n        # 此处的cases入参来自与 conftest.py  文件中 cases函数，与直接使用 @pytest.mark.parametrize\n        # 有着差不多的效果\n        # 发送请求\n>       response, expect, sql = BaseRequest.send_request(cases)\n\ntestcase\\test_aqi.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase\\base_requests.py:57: in send_request\n    res = cls.send_api(url, method, parametric_key, header, data, file)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'base.base_requests.BaseRequest'>\nrequest_url = 'http://10.206.83.102:8888', request_method = ''\nparametric_key = ''\nheader = {'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36'}\ndata = None, file = None\n\n    @classmethod\n    def send_api(cls, request_url, request_method, parametric_key, header=None, data=None, file=None) -> object:\n        \"\"\"\n        :param method: 请求方法\n        :param url: 请求url\n        :param parametric_key: 入参关键字， get/delete/head/options/请求使用params,\n         post/put/patch请求可使用json（application/json）/data\n        :param data: 参数数据，默认等于None\n        :param file: 文件对象\n        :param header: 请求头\n        :return: 返回res对象\n        \"\"\"\n        session = cls.get_session()\n    \n        if parametric_key == 'params':\n            res = session.request(method=request_method, url=request_url, params=data, headers=header)\n        elif parametric_key == 'data':\n            res = session.request(method=request_method, url=request_url, data=data, files=file, headers=header)\n        elif parametric_key == 'json':\n            res = session.request(method=request_method, url=request_url, json=data, files=file, headers=header)\n        else:\n>           raise ValueError(\n                '可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data')\nE           ValueError: 可选关键字为：get/delete/head/options/请求使用params, post/put/patch请求可使用json（application/json）/data\n\nbase\\base_requests.py:95: ValueError",
    "steps" : [ {
      "name" : "请求地址",
      "time" : {
        "start" : 1625214589189,
        "stop" : 1625214589194,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "78fec933bd34ed90",
        "name" : "请求地址",
        "source" : "78fec933bd34ed90.txt",
        "type" : "text/plain",
        "size" : 27
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "请求头",
      "time" : {
        "start" : 1625214589194,
        "stop" : 1625214589200,
        "duration" : 6
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "a0f120cc9c7d22e",
        "name" : "请求头",
        "source" : "a0f120cc9c7d22e.txt",
        "type" : "text/plain",
        "size" : 220
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "请求参数",
      "time" : {
        "start" : 1625214589200,
        "stop" : 1625214589205,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "b20e4b573e434bf0",
        "name" : "请求参数",
        "source" : "b20e4b573e434bf0.txt",
        "type" : "text/plain",
        "size" : 4
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    }, {
      "name" : "上传文件",
      "time" : {
        "start" : 1625214589205,
        "stop" : 1625214589210,
        "duration" : 5
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ {
        "uid" : "ce3b5b6d86dc54ae",
        "name" : "上传文件",
        "source" : "ce3b5b6d86dc54ae.txt",
        "type" : "text/plain",
        "size" : 2
      } ],
      "parameters" : [ ],
      "attachmentsCount" : 1,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 4,
    "shouldDisplayMessage" : true,
    "stepsCount" : 4,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "tag",
    "value" : "flaky(reruns=0, reruns_delay=1)"
  }, {
    "name" : "parentSuite",
    "value" : "testcase"
  }, {
    "name" : "suite",
    "value" : "test_aqi"
  }, {
    "name" : "host",
    "value" : "yanghua1-L1"
  }, {
    "name" : "thread",
    "value" : "13896-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testcase.test_aqi"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "cases",
    "value" : "['', '', '', '', '', '', '', '', '', '', '', '', '']"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ "flaky(reruns=0, reruns_delay=1)" ]
  },
  "source" : "d14c3705010cb957.json",
  "parameterValues" : [ "['', '', '', '', '', '', '', '', '', '', '', '', '']" ]
}